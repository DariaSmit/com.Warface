plugins {
    id 'java'
    id 'io.qameta.allure' version '2.9.6'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
def allureVersion = "2.17.2",

        selenideVersion = "6.2.1",
        restAssured = "4.4.0" ,
        junitVersion = "5.8.2" ,
        assertjVersion = "3.22.0",
        ownerVersion = "1.0.12",
        appiumVersion = "8.0.0",
        slf4jVersion = "1.7.32",
        commonVersion = "2.11.0"
allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2',
            "org.aspectj:aspectjweaver:1.9.6",
            "com.codeborne:selenide:6.9.0",
            "io.qameta.allure:allure-selenide:2.19.0",
            "io.rest-assured:rest-assured:4.3.1",
            "io.qameta.allure:allure-rest-assured:2.19.0",
            "org.aeonbits.owner:owner:1.0.12",
            'org.seleniumhq.selenium:selenium-java:4.5.0',
            "org.assertj:assertj-core:3.19.0",
            'org.slf4j:slf4j-simple:2.0.3',
            'org.junit.jupiter:junit-jupiter-engine',
            'org.seleniumhq.selenium:selenium-remote-driver:4.5.0',
            'io.github.bonigarcia:webdrivermanager:5.3.0')

}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

}
tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
test {
    useJUnitPlatform()
}